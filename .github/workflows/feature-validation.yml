name: 🧪 Feature Validation

# Trigger when PRs are opened, updated, or synchronized to dev branch from feature branches
on:
  pull_request:
    branches:
      - dev
    types: [opened, synchronize, reopened]
    paths-ignore:
      - '*.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'

# Set permissions for GITHUB_TOKEN
permissions:
  contents: read
  checks: write
  pull-requests: write
  statuses: write

jobs:
  # Job 1: Lint and Code Quality
  lint:
    name: 🔍 Lint & Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          # Full git history needed for Super-Linter
          fetch-depth: 0

      - name: 🏷️ Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v41
        with:
          files: |
            **/*.js
            **/*.json
            **/*.yml
            **/*.yaml
            **/*.md

      - name: 🦸 Run Super-Linter
        if: steps.changed-files.outputs.any_changed == 'true'
        uses: github/super-linter/slim@v5
        env:
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_ALL_CODEBASE: false
          VALIDATE_JAVASCRIPT_ES: true
          VALIDATE_JSON: true
          VALIDATE_YAML: true
          VALIDATE_MARKDOWN: true
          VALIDATE_GITHUB_ACTIONS: true
          JAVASCRIPT_ES_CONFIG_FILE: package.json
          LOG_LEVEL: WARN
          CREATE_LOG_FILE: true

      - name: 📊 Upload Super-Linter results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: super-linter-results
          path: super-linter.log
          retention-days: 7

  # Job 2: Build and Test
  build-test:
    name: 🏗️ Build & Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔧 Run ESLint
        run: npm run lint

      - name: ✨ Check Prettier formatting
        run: npm run format:check

      - name: 🏗️ Build application
        run: npm start & sleep 2 && pkill -f "node src/index.js" || true

      - name: 🧪 Run tests
        run: npm run test:coverage

      - name: 📊 Upload coverage reports
        if: matrix.node-version == '20.x'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          fail_ci_if_error: true
          verbose: true

      - name: 📈 Comment coverage report
        if: matrix.node-version == '20.x'
        uses: romeovs/lcov-reporter-action@v0.3.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          lcov-file: ./coverage/lcov.info

  # Job 3: Commit Message Validation
  commitlint:
    name: 💬 Validate Commit Messages
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 Validate commit messages
        run: |
          # Get the base branch (usually dev)
          BASE_SHA=$(git merge-base HEAD origin/dev)
          # Lint commits from base to HEAD
          npx commitlint --from $BASE_SHA --to HEAD --verbose

  # Job 4: Security Scan
  security:
    name: 🛡️ Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 Run npm audit
        run: npm audit --audit-level=moderate

      - name: 🕵️ CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: 🏗️ Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: 🔬 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # Job 5: Feature Branch Status Check
  feature-status:
    name: ✅ Feature Status Check
    runs-on: ubuntu-latest
    needs: [lint, build-test, commitlint, security]
    if: always()
    
    steps:
      - name: 📊 Check all jobs status
        run: |
          echo "Lint Status: ${{ needs.lint.result }}"
          echo "Build & Test Status: ${{ needs.build-test.result }}"
          echo "Commitlint Status: ${{ needs.commitlint.result }}"
          echo "Security Status: ${{ needs.security.result }}"
          
          if [[ "${{ needs.lint.result }}" == "success" && 
                "${{ needs.build-test.result }}" == "success" && 
                "${{ needs.commitlint.result }}" == "success" && 
                "${{ needs.security.result }}" == "success" ]]; then
            echo "✅ All feature validation checks passed!"
            echo "🚀 Ready to merge to dev branch"
          else
            echo "❌ Some checks failed. Please review and fix issues."
            exit 1
          fi

      - name: 💬 Comment PR status
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const { number: issue_number } = context.issue;
            
            const allSuccess = '${{ needs.lint.result }}' === 'success' && 
                              '${{ needs.build-test.result }}' === 'success' && 
                              '${{ needs.commitlint.result }}' === 'success' && 
                              '${{ needs.security.result }}' === 'success';
            
            const statusEmoji = allSuccess ? '✅' : '❌';
            const statusText = allSuccess ? 'All feature validation checks passed!' : 'Some checks failed';
            
            const body = `## ${statusEmoji} Feature Validation Results
            
            | Check | Status |
            |-------|--------|
            | 🔍 Lint & Code Quality | ${{ needs.lint.result }} |
            | 🏗️ Build & Test | ${{ needs.build-test.result }} |
            | 💬 Commit Messages | ${{ needs.commitlint.result }} |
            | 🛡️ Security Scan | ${{ needs.security.result }} |
            
            **Status:** ${statusText}
            
            ${allSuccess ? 
              '🚀 This feature is ready to be merged to the `dev` branch!' : 
              '⚠️ Please review and fix the failing checks before merging.'}
            `;
            
            github.rest.issues.createComment({
              owner,
              repo,
              issue_number,
              body
            });