name: 📋 Release Preparation

# Trigger when feature branches are merged into release branches
on:
  pull_request:
    branches:
      - 'release/**'
    types:
      - closed
  push:
    branches:
      - 'release/**'

# Prevent concurrent workflows on the same release branch
concurrency:
  group: release-preparation-${{ github.event.pull_request.base.ref || github.ref_name }}
  cancel-in-progress: false

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  prepare-release:
    name: 🚀 Prepare Release
    runs-on: ubuntu-latest
    # Run if PR was merged OR if it's a push to release branch
    if: github.event.pull_request.merged == true || github.event_name == 'push'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.base.ref || github.ref }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 Extract branch information
        id: branch_info
        run: |
          # Get branch name from PR or push event
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            BRANCH_NAME="${{ github.event.pull_request.base.ref }}"
          else
            BRANCH_NAME="${{ github.ref_name }}"
          fi

          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT

          # Extract date from branch name (release/DDMMYY-description)
          # Format: DDMMYY-description
          DATE_PART=$(echo $BRANCH_NAME | sed 's/release\///' | cut -d'-' -f1)
          echo "date_part=$DATE_PART" >> $GITHUB_OUTPUT

          # Set prerelease identifier with rc.DDMMYY format
          echo "prerelease_id=rc.$DATE_PART" >> $GITHUB_OUTPUT

      - name: 🔄 Run Semantic Release for Pre-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          # Configure git for semantic-release
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Run semantic-release with custom config for release branches
          # This will analyze commits, determine version bump, and create pre-release
          # The version will be like: v3.7.0-release-160925-payment-gateway.1
          npx semantic-release --extends ./.releaserc.release.json

      - name: 📢 Create PR comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            // Read the updated package.json to get the new version
            const fs = require('fs');
            const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
            const version = packageJson.version;

            const comment = `## 🎉 Pre-release Prepared: ${version}

            ### 📊 Version Information
            - **New Version**: ${version}
            - **Branch**: ${{ steps.branch_info.outputs.branch_name }}

            ### ✅ Completed Actions
            - ✔️ Generated pre-release version using semantic-release
            - ✔️ Updated CHANGELOG.md with draft entries
            - ✔️ Created RELEASE_NOTES.md
            - ✔️ Updated package.json and package-lock.json

            ### 📋 Next Steps
            1. Complete QA testing on this release branch
            2. Review and update release notes as needed
            3. Once approved, create PR to merge into main
            4. Semantic release will create the final production version

            ### 🔗 Resources
            - [Changelog](https://github.com/${{ github.repository }}/blob/${{ steps.branch_info.outputs.branch_name }}/CHANGELOG.md)
            - [Release Notes](https://github.com/${{ github.repository }}/blob/${{ steps.branch_info.outputs.branch_name }}/RELEASE_NOTES.md)

            ---
            *This pre-release was automatically generated using semantic-release based on conventional commits.*`;

            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });