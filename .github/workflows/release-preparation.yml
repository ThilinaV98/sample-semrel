name: 🎁 Release Preparation

# Manual trigger to create release branches for QA testing
on:
  workflow_dispatch:
    inputs:
      source_branch:
        description: 'Source branch for release (usually dev)'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - main
      release_type:
        description: 'Type of release'
        required: true
        default: 'auto'
        type: choice
        options:
          - auto
          - major
          - minor
          - patch
          - prerelease
      pre_release_identifier:
        description: 'Pre-release identifier (e.g., rc, beta, alpha)'
        required: false
        default: 'rc'
        type: string

# Set permissions for GITHUB_TOKEN
permissions:
  contents: write
  pull-requests: write
  actions: write

jobs:
  # Job 1: Validate Source Branch
  validate-source:
    name: ✅ Validate Source Branch
    runs-on: ubuntu-latest
    
    outputs:
      branch_valid: ${{ steps.validate.outputs.valid }}
      next_version: ${{ steps.calculate-version.outputs.version }}
    
    steps:
      - name: 📥 Checkout source branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.source_branch }}
          fetch-depth: 0

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: ✅ Validate source branch
        id: validate
        run: |
          # Check if source branch exists and has recent commits
          BRANCH="${{ github.event.inputs.source_branch }}"
          
          if ! git show-ref --verify --quiet refs/heads/$BRANCH && ! git show-ref --verify --quiet refs/remotes/origin/$BRANCH; then
            echo "❌ Branch $BRANCH does not exist"
            echo "valid=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # Check if there are commits since last release
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -n "$LAST_TAG" ]; then
            COMMITS_COUNT=$(git rev-list --count $LAST_TAG..HEAD 2>/dev/null || echo "0")
          else
            COMMITS_COUNT=$(git rev-list --count HEAD)
          fi
          
          echo "Commits since last release: $COMMITS_COUNT"
          
          if [ "$COMMITS_COUNT" -eq "0" ]; then
            echo "⚠️ No new commits since last release"
            echo "valid=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          echo "✅ Source branch validation passed"
          echo "valid=true" >> $GITHUB_OUTPUT

      - name: 🧮 Calculate next version
        id: calculate-version
        run: |
          # Use semantic-release to calculate next version
          RELEASE_TYPE="${{ github.event.inputs.release_type }}"
          
          if [ "$RELEASE_TYPE" = "auto" ]; then
            # Let semantic-release determine version
            NEXT_VERSION=$(npx semantic-release --dry-run --no-ci 2>&1 | grep -o 'Published release [0-9]\+\.[0-9]\+\.[0-9]\+' | cut -d' ' -f3 || echo "")
            
            if [ -z "$NEXT_VERSION" ]; then
              # Fallback: calculate based on commit types
              LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.0.0")
              
              # Check for breaking changes
              if git log --pretty=format:"%s" $LAST_TAG..HEAD | grep -q "BREAKING CHANGE\|!:"; then
                NEXT_VERSION=$(npx semver -i major $LAST_TAG)
              # Check for features
              elif git log --pretty=format:"%s" $LAST_TAG..HEAD | grep -q "^feat"; then
                NEXT_VERSION=$(npx semver -i minor $LAST_TAG)
              # Check for fixes
              elif git log --pretty=format:"%s" $LAST_TAG..HEAD | grep -q "^fix\|^perf"; then
                NEXT_VERSION=$(npx semver -i patch $LAST_TAG)
              else
                echo "❌ No releasable commits found"
                exit 1
              fi
            fi
          else
            # Use specified release type
            LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.0.0")
            NEXT_VERSION=$(npx semver -i $RELEASE_TYPE $LAST_TAG)
          fi
          
          # Add pre-release identifier
          PRE_ID="${{ github.event.inputs.pre_release_identifier }}"
          if [ -n "$PRE_ID" ]; then
            NEXT_VERSION="$NEXT_VERSION-$PRE_ID.1"
          fi
          
          echo "📦 Next version will be: $NEXT_VERSION"
          echo "version=$NEXT_VERSION" >> $GITHUB_OUTPUT

  # Job 2: Create Release Branch
  create-release-branch:
    name: 🌿 Create Release Branch
    runs-on: ubuntu-latest
    needs: validate-source
    if: needs.validate-source.outputs.branch_valid == 'true'
    
    outputs:
      release_branch: ${{ steps.create-branch.outputs.branch_name }}
      release_version: ${{ needs.validate-source.outputs.next_version }}
    
    steps:
      - name: 📥 Checkout source branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.source_branch }}
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔧 Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: 🌿 Create release branch
        id: create-branch
        run: |
          VERSION="${{ needs.validate-source.outputs.next_version }}"
          BRANCH_NAME="release/v$VERSION"
          
          # Create and checkout release branch
          git checkout -b $BRANCH_NAME
          
          echo "📝 Created release branch: $BRANCH_NAME"
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT

      - name: 📝 Update version in package.json
        run: |
          VERSION="${{ needs.validate-source.outputs.next_version }}"
          
          # Update package.json version
          npm version --no-git-tag-version $VERSION
          
          # Commit version update
          git add package.json
          git commit -m "chore: bump version to $VERSION for release"

      - name: 📤 Push release branch
        run: |
          BRANCH_NAME="${{ steps.create-branch.outputs.branch_name }}"
          git push origin $BRANCH_NAME

      - name: 📋 Generate release notes
        id: release-notes
        run: |
          VERSION="${{ needs.validate-source.outputs.next_version }}"
          BRANCH="${{ github.event.inputs.source_branch }}"
          
          echo "## 🎁 Release $VERSION" > release-notes.md
          echo "" >> release-notes.md
          echo "**Source Branch:** $BRANCH" >> release-notes.md
          echo "**Release Branch:** release/v$VERSION" >> release-notes.md
          echo "**Created:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> release-notes.md
          echo "" >> release-notes.md
          echo "### 📋 Changes in this release:" >> release-notes.md
          echo "" >> release-notes.md
          
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -n "$LAST_TAG" ]; then
            git log --pretty=format:"- %s (%h)" $LAST_TAG..HEAD >> release-notes.md
          else
            git log --pretty=format:"- %s (%h)" --max-count=20 >> release-notes.md
          fi
          
          echo "" >> release-notes.md
          echo "### 🧪 QA Testing" >> release-notes.md
          echo "" >> release-notes.md
          echo "- [ ] Functional testing completed" >> release-notes.md
          echo "- [ ] Performance testing completed" >> release-notes.md
          echo "- [ ] Security testing completed" >> release-notes.md
          echo "- [ ] User acceptance testing completed" >> release-notes.md
          echo "" >> release-notes.md
          echo "---" >> release-notes.md
          echo "*This release branch was automatically created and is ready for QA testing.*" >> release-notes.md

      - name: 📊 Upload release notes
        uses: actions/upload-artifact@v4
        with:
          name: release-notes-${{ needs.validate-source.outputs.next_version }}
          path: release-notes.md
          retention-days: 30

  # Job 3: Create QA Testing Issue
  create-qa-issue:
    name: 📝 Create QA Testing Issue
    runs-on: ubuntu-latest
    needs: create-release-branch
    
    steps:
      - name: 📥 Download release notes
        uses: actions/download-artifact@v3
        with:
          name: release-notes-${{ needs.create-release-branch.outputs.release_version }}

      - name: 📝 Create QA testing issue
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const releaseNotes = fs.readFileSync('release-notes.md', 'utf8');
            
            const { owner, repo } = context.repo;
            const version = '${{ needs.create-release-branch.outputs.release_version }}';
            const branch = '${{ needs.create-release-branch.outputs.release_branch }}';
            
            const issue = await github.rest.issues.create({
              owner,
              repo,
              title: `🧪 QA Testing: Release ${version}`,
              body: `${releaseNotes}
              
              ## 🎯 QA Testing Instructions
              
              1. **Checkout the release branch:**
                 \`\`\`bash
                 git checkout ${branch}
                 npm ci
                 npm start
                 \`\`\`
              
              2. **Test all major functionalities**
              3. **Verify version number in package.json**
              4. **Check that all tests pass: \`npm test\`**
              5. **Validate performance requirements**
              
              ## ✅ QA Sign-off
              
              When all testing is complete and approved:
              - Comment "APPROVED" on this issue
              - Create PR from \`${branch}\` to \`main\`
              - The semantic release workflow will handle the final versioning and release
              
              ## 🚫 If Issues Found
              
              - Comment "REJECTED" with details
              - Create new commits directly on the \`${branch}\` branch
              - Update this issue when ready for re-testing
              `,
              labels: ['QA', 'testing', 'release'],
              assignees: [] // Add your QA team members here
            });
            
            console.log(\`Created QA issue: \${issue.data.html_url}\`);

  # Job 4: Notification and Summary
  notify-completion:
    name: 📬 Notify Completion
    runs-on: ubuntu-latest
    needs: [validate-source, create-release-branch, create-qa-issue]
    if: always()
    
    steps:
      - name: 📊 Summary
        run: |
          echo "🎁 Release Preparation Summary"
          echo "================================"
          echo "Source Branch: ${{ github.event.inputs.source_branch }}"
          echo "Release Type: ${{ github.event.inputs.release_type }}"
          echo "Version: ${{ needs.create-release-branch.outputs.release_version }}"
          echo "Release Branch: ${{ needs.create-release-branch.outputs.release_branch }}"
          echo "Status: ${{ job.status }}"
          
          if [[ "${{ needs.validate-source.result }}" == "success" && 
                "${{ needs.create-release-branch.result }}" == "success" && 
                "${{ needs.create-qa-issue.result }}" == "success" ]]; then
            echo "✅ Release preparation completed successfully!"
            echo "🎯 QA team can now begin testing the release branch"
          else
            echo "❌ Release preparation failed. Check the logs for details."
          fi

      - name: 💬 Create summary comment (if triggered from PR)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const { number: issue_number } = context.issue;
            const version = '${{ needs.create-release-branch.outputs.release_version }}' || 'unknown';
            const branch = '${{ needs.create-release-branch.outputs.release_branch }}' || 'unknown';
            
            const success = '${{ needs.create-release-branch.result }}' === 'success';
            const statusEmoji = success ? '✅' : '❌';
            
            const body = \`## \${statusEmoji} Release Preparation Results
            
            **Version:** \${version}
            **Release Branch:** \${branch}
            **Status:** \${success ? 'Success' : 'Failed'}
            
            \${success ? 
              '🎯 QA testing can now begin on the release branch.' : 
              '❌ Release preparation failed. Please check the workflow logs.'}\`;
            
            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number,
              body
            });