name: üöÄ Release Management

# Unified workflow for both pre-release and production release management
on:
  push:
    branches:
      - 'main'
      - 'release/**'
  pull_request:
    branches:
      - 'release/**'
    types:
      - closed
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type (for hotfixes)'
        required: false
        default: 'standard'
        type: choice
        options:
          - standard
          - hotfix

# Prevent concurrent workflows on the same branch
concurrency:
  group: release-management-${{ github.event.pull_request.base.ref || github.ref_name }}
  cancel-in-progress: false

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  pre-release:
    name: üìã Pre-release Preparation
    runs-on: ubuntu-latest
    # Run only for release branches
    if: |
      (startsWith(github.ref, 'refs/heads/release/') && github.event_name == 'push') ||
      (github.event_name == 'pull_request' && github.event.pull_request.merged == true && startsWith(github.event.pull_request.base.ref, 'release/'))

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.base.ref || github.ref }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: üì¶ Install dependencies
        run: npm ci

      - name: üîç Extract branch information
        id: branch_info
        run: |
          # Get branch name from PR or push event
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            BRANCH_NAME="${{ github.event.pull_request.base.ref }}"
          else
            BRANCH_NAME="${{ github.ref_name }}"
          fi

          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT

          # Extract date from branch name (release/DDMMYY-description)
          # Format: DDMMYY-description
          DATE_PART=$(echo $BRANCH_NAME | sed 's/release\///' | cut -d'-' -f1)
          echo "date_part=$DATE_PART" >> $GITHUB_OUTPUT

          # Set prerelease identifier with rc.DDMMYY format
          echo "prerelease_id=rc.$DATE_PART" >> $GITHUB_OUTPUT

      - name: üîÑ Run Semantic Release for Pre-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          # Configure git for semantic-release
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Run semantic-release with custom config for release branches
          # This will analyze commits, determine version bump, and create pre-release
          # The version will be like: v3.8.0-rc.1
          npx semantic-release --extends ./.releaserc.release.json

      - name: üì¢ Create PR comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            // Read the updated package.json to get the new version
            const fs = require('fs');
            const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
            const version = packageJson.version;

            const comment = `## üéâ Pre-release Prepared: ${version}

            ### üìä Version Information
            - **New Version**: ${version}
            - **Branch**: ${{ steps.branch_info.outputs.branch_name }}

            ### ‚úÖ Completed Actions
            - ‚úîÔ∏è Generated pre-release version using semantic-release
            - ‚úîÔ∏è Updated CHANGELOG.md with draft entries
            - ‚úîÔ∏è Created RELEASE_NOTES.md
            - ‚úîÔ∏è Updated package.json and package-lock.json

            ### üìã Next Steps
            1. Complete QA testing on this release branch
            2. Review and update release notes as needed
            3. Once approved, create PR to merge into main
            4. Semantic release will create the final production version

            ### üîó Resources
            - [Changelog](https://github.com/${{ github.repository }}/blob/${{ steps.branch_info.outputs.branch_name }}/CHANGELOG.md)
            - [Release Notes](https://github.com/${{ github.repository }}/blob/${{ steps.branch_info.outputs.branch_name }}/RELEASE_NOTES.md)

            ---
            *This pre-release was automatically generated using semantic-release based on conventional commits.*`;

            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });

  production-release:
    name: üöÄ Production Release
    runs-on: ubuntu-latest
    # Run only for main branch pushes or manual dispatch
    if: |
      (github.ref == 'refs/heads/main' && github.event_name == 'push') ||
      github.event_name == 'workflow_dispatch'

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: üì¶ Install dependencies
        run: npm ci

      - name: üîç Validate commit source
        if: github.event_name == 'push'
        run: |
          # Check the commit message or branch that was merged
          COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          echo "Last commit message: $COMMIT_MESSAGE"

          # Check if this was a merge from release/* or hotfix/*
          if [[ "$COMMIT_MESSAGE" =~ "Merge pull request" ]]; then
            if [[ ! "$COMMIT_MESSAGE" =~ "release/|hotfix/" ]]; then
              echo "‚ö†Ô∏è Warning: Merge does not appear to be from release/* or hotfix/* branch"
              echo "Continuing anyway as this might be a direct commit or different merge"
            else
              echo "‚úÖ Valid merge from release/* or hotfix/* branch detected"
            fi
          fi

      - name: üîÑ Semantic Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          # Remove pre-release suffix if present
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          if [[ "$CURRENT_VERSION" == *"-"* ]]; then
            BASE_VERSION=$(echo $CURRENT_VERSION | sed 's/-.*$//')
            echo "Converting pre-release $CURRENT_VERSION to stable release"
            npm version $BASE_VERSION --no-git-tag-version
          fi

          # Run semantic-release for production
          npx semantic-release