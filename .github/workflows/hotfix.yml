name: 🚨 Hotfix Deployment

# Trigger for emergency fixes that need to go directly to production
on:
  push:
    branches:
      - hotfix/*
  pull_request:
    branches:
      - main
    types: [opened, synchronize, reopened]
    paths-ignore:
      - '*.md'
      - 'docs/**'

# Set permissions for GITHUB_TOKEN
permissions:
  contents: write
  checks: write
  pull-requests: write
  actions: read

jobs:
  # Job 1: Expedited Validation
  expedited-validation:
    name: ⚡ Expedited Validation
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/heads/hotfix/') || (github.event_name == 'pull_request' && startsWith(github.head_ref, 'hotfix/'))
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 Quick lint check
        run: npm run lint

      - name: ✨ Format check
        run: npm run format:check

      - name: 🧪 Run critical tests only
        run: |
          # Run tests with coverage
          npm run test:coverage
          
          # Check coverage thresholds for critical paths
          COVERAGE=$(cat coverage/coverage-summary.json | jq '.total.lines.pct')
          echo "Coverage: $COVERAGE%"
          
          if (( $(echo "$COVERAGE < 80" | bc -l) )); then
            echo "❌ Coverage below 80% threshold for hotfix"
            exit 1
          fi

      - name: 🏗️ Build validation
        run: |
          # Quick build test
          timeout 10s npm start || true

      - name: 🛡️ Security scan
        run: |
          # Quick security audit
          npm audit --audit-level=high || true

      - name: 📊 Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: hotfix-test-results
          path: coverage/
          retention-days: 7

  # Job 2: Impact Analysis
  impact-analysis:
    name: 🔍 Impact Analysis
    runs-on: ubuntu-latest
    needs: expedited-validation
    
    outputs:
      severity: ${{ steps.analyze.outputs.severity }}
      affected_areas: ${{ steps.analyze.outputs.affected_areas }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Analyze hotfix impact
        id: analyze
        run: |
          echo "Analyzing hotfix changes..."
          
          # Get changed files
          CHANGED_FILES=$(git diff --name-only origin/main...HEAD)
          echo "Changed files:"
          echo "$CHANGED_FILES"
          
          # Determine severity based on changed files
          SEVERITY="low"
          if echo "$CHANGED_FILES" | grep -q "src/.*\.js"; then
            SEVERITY="medium"
          fi
          if echo "$CHANGED_FILES" | grep -q "package.*\.json\|.*config.*"; then
            SEVERITY="high"
          fi
          
          echo "severity=$SEVERITY" >> $GITHUB_OUTPUT
          echo "affected_areas=$CHANGED_FILES" >> $GITHUB_OUTPUT
          
          echo "Hotfix severity: $SEVERITY"

      - name: 💬 Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const { number: issue_number } = context.issue;
            const severity = '${{ steps.analyze.outputs.severity }}';
            
            const severityEmoji = {
              low: '🟢',
              medium: '🟡', 
              high: '🔴'
            };
            
            const body = `## 🚨 Hotfix Impact Analysis
            
            **Severity:** ${severityEmoji[severity]} ${severity.toUpperCase()}
            
            ### ⚡ Expedited Testing Results
            - ✅ Critical tests passed
            - ✅ Security scan completed
            - ✅ Build validation successful
            
            ### 📋 Changed Files
            \`\`\`
            ${{ steps.analyze.outputs.affected_areas }}
            \`\`\`
            
            ### ⚠️ Important
            This is a hotfix that will be deployed directly to production.
            Please ensure thorough review before approval.
            
            ### 🔄 Post-Deployment
            After merge to main:
            1. Automatic sync to dev branch will occur
            2. Semantic release will create a patch version
            3. Changelog will be updated
            `;
            
            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number,
              body
            });

  # Job 3: Approval Gate (for PRs)
  approval-gate:
    name: 🔐 Approval Gate
    runs-on: ubuntu-latest
    needs: [expedited-validation, impact-analysis]
    if: github.event_name == 'pull_request'
    
    steps:
      - name: ✅ Check approval status
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const { number: pull_number } = context.issue;
            
            // Get PR reviews
            const reviews = await github.rest.pulls.listReviews({
              owner,
              repo,
              pull_number
            });
            
            // Check for approvals
            const approvals = reviews.data.filter(r => r.state === 'APPROVED');
            const severity = '${{ needs.impact-analysis.outputs.severity }}';
            
            // Require more approvals for higher severity
            const requiredApprovals = {
              low: 1,
              medium: 2,
              high: 2
            };
            
            const required = requiredApprovals[severity] || 1;
            
            if (approvals.length < required) {
              core.setFailed(`Hotfix requires ${required} approval(s). Currently has ${approvals.length}.`);
            } else {
              console.log(`✅ Hotfix has required approvals (${approvals.length}/${required})`);
            }

  # Job 4: Direct Main Deployment Prep
  deployment-prep:
    name: 🚀 Deployment Preparation
    runs-on: ubuntu-latest
    needs: [expedited-validation, impact-analysis]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: 📥 Checkout main
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: 🔄 Sync to dev branch
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Ensure dev branch exists and sync
          if git show-ref --verify --quiet refs/remotes/origin/dev; then
            echo "📝 Syncing hotfix to dev branch"
            git checkout dev
            git merge main --no-ff -m "chore: sync hotfix from main to dev"
            git push origin dev
          else
            echo "ℹ️ Dev branch does not exist, skipping sync"
          fi

      - name: 📋 Create hotfix summary
        run: |
          echo "## 🚨 Hotfix Deployment Summary" > hotfix-summary.md
          echo "" >> hotfix-summary.md
          echo "**Timestamp:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> hotfix-summary.md
          echo "**Commit:** $GITHUB_SHA" >> hotfix-summary.md
          echo "**Severity:** ${{ needs.impact-analysis.outputs.severity }}" >> hotfix-summary.md
          echo "" >> hotfix-summary.md
          echo "### Changed Files" >> hotfix-summary.md
          echo "\`\`\`" >> hotfix-summary.md
          git diff --name-only HEAD~1 >> hotfix-summary.md
          echo "\`\`\`" >> hotfix-summary.md
          echo "" >> hotfix-summary.md
          echo "### Commit Message" >> hotfix-summary.md
          git log -1 --pretty=format:"%s%n%n%b" >> hotfix-summary.md

      - name: 📊 Upload hotfix summary
        uses: actions/upload-artifact@v3
        with:
          name: hotfix-summary-${{ github.sha }}
          path: hotfix-summary.md
          retention-days: 90

  # Job 5: Hotfix Status
  hotfix-status:
    name: 📊 Hotfix Status
    runs-on: ubuntu-latest
    needs: [expedited-validation, impact-analysis, deployment-prep]
    if: always()
    
    steps:
      - name: 📋 Generate status report
        run: |
          echo "🚨 Hotfix Workflow Status"
          echo "========================"
          echo ""
          echo "Branch: ${{ github.ref }}"
          echo "Event: ${{ github.event_name }}"
          echo "Validation: ${{ needs.expedited-validation.result }}"
          echo "Impact Analysis: ${{ needs.impact-analysis.result }}"
          echo "Severity: ${{ needs.impact-analysis.outputs.severity }}"
          
          if [[ "${{ needs.expedited-validation.result }}" == "success" && 
                "${{ needs.impact-analysis.result }}" == "success" ]]; then
            echo ""
            echo "✅ Hotfix validation successful!"
            echo "Ready for deployment to production."
          else
            echo ""
            echo "❌ Hotfix validation failed!"
            echo "Please review errors before proceeding."
            exit 1
          fi

      - name: 🔔 Send notification
        if: failure()
        run: |
          echo "❌ Hotfix workflow failed - notification would be sent here"
          # Add Slack/Teams/email notification here