name: üöÄ Dev Integration

# Trigger when code is pushed to dev branch (usually from merged feature PRs)
on:
  push:
    branches:
      - dev
    paths-ignore:
      - '*.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'

# Set permissions for GITHUB_TOKEN
permissions:
  contents: read
  checks: write
  actions: write

jobs:
  # Job 1: Integration Tests and Validation
  integration:
    name: üîÑ Integration Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: üì¶ Install dependencies
        run: npm ci

      - name: üß™ Run full test suite
        run: npm run test:coverage

      - name: üèóÔ∏è Build and start application
        run: |
          npm start &
          APP_PID=$!
          echo "APP_PID=$APP_PID" >> $GITHUB_ENV
          sleep 5  # Allow app to start

      - name: üîç Health check
        run: |
          # Simple health check (adjust URL based on your app)
          curl -f http://localhost:3000/ || (echo "Health check failed" && exit 1)

      - name: üõë Stop application
        if: always()
        run: |
          if [ -n "$APP_PID" ]; then
            kill $APP_PID || true
          fi

      - name: üìä Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: dev-test-results
          path: |
            coverage/
            test-results.xml
          retention-days: 7

  # Job 2: Pre-release Validation
  pre-release-validation:
    name: üîç Pre-release Validation
    runs-on: ubuntu-latest
    needs: integration
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: üì¶ Install dependencies
        run: npm ci

      - name: üè∑Ô∏è Check for releasable commits
        id: check-commits
        run: |
          # Get commits since last release
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            echo "No previous tags found, checking all commits"
            COMMITS=$(git log --pretty=format:"%s" --since="1 month ago")
          else
            echo "Checking commits since $LAST_TAG"
            COMMITS=$(git log --pretty=format:"%s" $LAST_TAG..HEAD)
          fi
          
          echo "Recent commits:"
          echo "$COMMITS"
          
          # Check if there are any feat: or fix: commits (releasable)
          RELEASABLE=$(echo "$COMMITS" | grep -E "^(feat|fix|perf):" | wc -l)
          echo "releasable_commits=$RELEASABLE" >> $GITHUB_OUTPUT
          
          # Check for breaking changes
          BREAKING=$(echo "$COMMITS" | grep -E "(BREAKING CHANGE|!):" | wc -l)
          echo "breaking_changes=$BREAKING" >> $GITHUB_OUTPUT
          
          echo "Found $RELEASABLE releasable commits"
          echo "Found $BREAKING breaking changes"

      - name: üéØ Dry run semantic release
        run: |
          npx semantic-release --dry-run --no-ci
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: üìù Generate release notes preview
        if: steps.check-commits.outputs.releasable_commits > 0
        id: release-notes
        run: |
          echo "## üìã Upcoming Release Preview" > release-notes.md
          echo "" >> release-notes.md
          echo "Based on commits in dev branch, the next release would include:" >> release-notes.md
          echo "" >> release-notes.md
          
          # Get conventional commits for preview
          git log --pretty=format:"- %s" --since="$(git describe --tags --abbrev=0 2>/dev/null || echo '1 month ago')" >> release-notes.md
          
          echo "release_ready=true" >> $GITHUB_OUTPUT

      - name: üìä Upload release preview
        if: steps.release-notes.outputs.release_ready == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: release-preview
          path: release-notes.md
          retention-days: 30

  # Job 3: Performance and Quality Metrics
  quality-check:
    name: üìà Quality Metrics
    runs-on: ubuntu-latest
    needs: integration
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: üì¶ Install dependencies
        run: npm ci

      - name: üîç Code quality analysis
        run: |
          # Run ESLint with detailed output
          npx eslint src/ test/ --format json --output-file eslint-report.json || true
          
          # Generate complexity report (if you have complexity tools)
          echo "üìä Code Quality Metrics:" > quality-report.md
          echo "- ESLint issues: $(jq '.[] | length' eslint-report.json 2>/dev/null || echo 'N/A')" >> quality-report.md
          echo "- Test coverage: $(npm run test:coverage --silent 2>&1 | grep -o '[0-9]\+\.[0-9]\+%' | tail -1 || echo 'N/A')" >> quality-report.md

      - name: üìä Upload quality reports
        uses: actions/upload-artifact@v3
        with:
          name: quality-reports
          path: |
            eslint-report.json
            quality-report.md
          retention-days: 7

  # Job 4: Dev Integration Status
  dev-status:
    name: ‚úÖ Dev Integration Status
    runs-on: ubuntu-latest
    needs: [integration, pre-release-validation, quality-check]
    if: always()
    
    steps:
      - name: üìä Check integration status
        run: |
          echo "Integration Status: ${{ needs.integration.result }}"
          echo "Pre-release Validation: ${{ needs.pre-release-validation.result }}"
          echo "Quality Check: ${{ needs.quality-check.result }}"
          
          if [[ "${{ needs.integration.result }}" == "success" && 
                "${{ needs.pre-release-validation.result }}" == "success" && 
                "${{ needs.quality-check.result }}" == "success" ]]; then
            echo "‚úÖ Dev integration successful!"
            echo "üöÄ Ready for release branch creation"
          else
            echo "‚ùå Dev integration failed. Check logs for details."
            exit 1
          fi

      - name: üì¨ Create integration summary
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const sha = context.sha;
            
            const allSuccess = '${{ needs.integration.result }}' === 'success' && 
                              '${{ needs.pre-release-validation.result }}' === 'success' && 
                              '${{ needs.quality-check.result }}' === 'success';
            
            const statusEmoji = allSuccess ? '‚úÖ' : '‚ùå';
            const statusText = allSuccess ? 'Dev Integration Successful' : 'Dev Integration Failed';
            
            // Create a commit status
            await github.rest.repos.createCommitStatus({
              owner,
              repo,
              sha,
              state: allSuccess ? 'success' : 'failure',
              context: 'Dev Integration',
              description: statusText,
              target_url: `${context.payload.repository.html_url}/actions/runs/${context.runId}`
            });

      - name: üîî Notify on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            // You can customize this to send notifications to Slack, Teams, etc.
            console.log('Dev integration failed. Consider setting up notifications here.');
            
            // Example: Create an issue for failed integration
            // await github.rest.issues.create({
            //   owner: context.repo.owner,
            //   repo: context.repo.repo,
            //   title: 'Dev Integration Failed',
            //   body: 'The dev integration workflow failed. Please check the logs and fix issues.',
            //   labels: ['bug', 'ci-cd']
            // });